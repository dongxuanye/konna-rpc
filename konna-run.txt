json=com.org.konnarpc.serializer.JsonSerializer0
测试加载异常问题

java.lang.ClassNotFoundException: com.org.konnarpc.serializer.JsonSerializer0
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:421)
	at java.base/java.lang.Class.forName(Class.java:412)
	at com.org.konnarpc.spi.SpiLoader.load(SpiLoader.java:118)
	at com.org.konnarpc.spi.SpiLoader.loadAll(SpiLoader.java:91)
	at com.org.konnarpc.spi.SpiLoader.main(SpiLoader.java:131)

正常运行 SpiLoader方法
18:09:26.135 [main] INFO com.org.konnarpc.spi.SpiLoader -- 加载所有 SPI
18:09:26.139 [main] INFO com.org.konnarpc.spi.SpiLoader -- 加载类型为 com.org.konnarpc.serializer.Serializer 的 SPI
{com.org.konnarpc.serializer.Serializer={jdk=class com.org.konnarpc.serializer.JdkSerializer, hessian=class com.org.konnarpc.serializer.HessianSerializer, json=class com.org.konnarpc.serializer.JsonSerializer, kryo=class com.org.konnarpc.serializer.KryoSerializer}}
com.org.konnarpc.serializer.JsonSerializer@7a36aefa

启动生产者日志
18:10:57.151 [main] INFO com.org.konnarpc.RpcApplication -- rpc init, config=RpcConfig(name=konna-rpc, version=2.0, serverHost=localhost, serverPort=8080, mock=false, serializer=kryo)

启动消费者日志
RpcConfig(name=konna-rpc, version=2.0, serverHost=localhost, serverPort=8081, mock=false, serializer=kryo)
18:12:24.418 [main] INFO com.org.konnarpc.RpcApplication -- rpc init, config=RpcConfig(name=konna-rpc, version=2.0, serverHost=localhost, serverPort=8081, mock=false, serializer=kryo)
18:12:24.434 [main] INFO com.org.konnarpc.spi.SpiLoader -- 加载类型为 com.org.konnarpc.serializer.Serializer 的 SPI
发送请求生产者这边监听没有问题
用户名为：konna

假如我们要实现自己的自定义序列化器
1.写一个类实现Serializer接口
2.在META-INF/rpc/custom目录下，写自己的spi配置文件，加载自己的实现类

完成注册中心之后
在etcd客户端中可以看,/rpc/com.org.example.common.service.UserService:1.0/localhost:8082
先启动服务提供一端
HTTP server started on port 8082
17:47:42.444 [vert.x-eventloop-thread-0] DEBUG io.netty.handler.codec.compression.ZlibCodecFactory -- -Dio.netty.noJdkZlibDecoder: false
17:47:42.444 [vert.x-eventloop-thread-0] DEBUG io.netty.handler.codec.compression.ZlibCodecFactory -- -Dio.netty.noJdkZlibEncoder: false
17:47:42.467 [vert.x-eventloop-thread-0] INFO com.org.konnarpc.spi.SpiLoader -- 加载类型为 com.org.konnarpc.serializer.Serializer 的 SPI
Received request：POST /
用户名为：konna
Received request：POST /

后启动服务消费端
消费者一端konna
17:50:01.910 [vert.x-eventloop-thread-0] DEBUG io.grpc.netty.NettyClientHandler -- [id: 0x9ecc5ed4, L:/127.0.0.1:37814 - R:localhost/127.0.0.1:2379] OUTBOUND HEADERS: streamId=5 headers=GrpcHttp2OutboundHeaders[:authority: localhost:2379, :path: /etcdserverpb.KV/Range, :method: POST, :scheme: http, content-type: application/grpc, te: trailers, user-agent: grpc-java-netty/1.60.0, grpc-accept-encoding: gzip] streamDependency=0 weight=16 exclusive=false padding=0 endStream=false
17:50:01.911 [vert.x-eventloop-thread-0] DEBUG io.grpc.netty.NettyClientHandler -- [id: 0x9ecc5ed4, L:/127.0.0.1:37814 - R:localhost/127.0.0.1:2379] OUTBOUND DATA: streamId=5 padding=0 endStream=true length=111 bytes=000000006a0a332f727063636f6d2e6f72672e6578616d706c652e636f6d6d6f6e2e736572766963652e55736572536572766963653a312e302f12332f727063...
17:50:01.913 [vert.x-eventloop-thread-0] DEBUG io.grpc.netty.NettyClientHandler -- [id: 0x9ecc5ed4, L:/127.0.0.1:37814 - R:localhost/127.0.0.1:2379] INBOUND WINDOW_UPDATE: streamId=0 windowSizeIncrement=111
17:50:01.913 [vert.x-eventloop-thread-0] DEBUG io.grpc.netty.NettyClientHandler -- [id: 0x9ecc5ed4, L:/127.0.0.1:37814 - R:localhost/127.0.0.1:2379] INBOUND PING: ack=false bytes=145258749040133895
17:50:01.913 [vert.x-eventloop-thread-0] DEBUG io.grpc.netty.NettyClientHandler -- [id: 0x9ecc5ed4, L:/127.0.0.1:37814 - R:localhost/127.0.0.1:2379] OUTBOUND PING: ack=true bytes=145258749040133895
17:50:01.914 [vert.x-eventloop-thread-0] DEBUG io.grpc.netty.NettyClientHandler -- [id: 0x9ecc5ed4, L:/127.0.0.1:37814 - R:localhost/127.0.0.1:2379] INBOUND HEADERS: streamId=5 headers=GrpcHttp2ResponseHeaders[:status: 200, content-type: application/grpc] padding=0 endStream=false
17:50:01.914 [vert.x-eventloop-thread-0] DEBUG io.grpc.netty.NettyClientHandler -- [id: 0x9ecc5ed4, L:/127.0.0.1:37814 - R:localhost/127.0.0.1:2379] INBOUND DATA: streamId=5 padding=0 endStream=false length=277 bytes=00000001100a1a08b298eaf1948386fccd0110cdd2918bd2b881cf8e011816200212ef010a412f727063636f6d2e6f72672e6578616d706c652e636f6d6d6f6e...
17:50:01.915 [vert.x-eventloop-thread-0] DEBUG io.grpc.netty.NettyClientHandler -- [id: 0x9ecc5ed4, L:/127.0.0.1:37814 - R:localhost/127.0.0.1:2379] INBOUND HEADERS: streamId=5 headers=GrpcHttp2ResponseHeaders[grpc-status: 0, grpc-message: ] padding=0 endStream=true
number:1

由于我的租约设置的是30秒，过一会就会服务就会过期，还是存在问题

测试心跳检测机制
15:38:10.079 [hutool-cron-1] INFO com.org.konnarpc.registry.EtcdRegistry -- 节点 /rpc/myService:1.0/localhost:1235 续签成功
15:38:20.028 [hutool-cron-0] INFO com.org.konnarpc.registry.EtcdRegistry -- 节点 /rpc/myService:1.0/localhost:1234 续签成功
15:38:20.006 [hutool-cron-0] INFO com.org.konnarpc.registry.EtcdRegistry -- 节点 /rpc/myService:2.0/localhost:1234 续签成功

测试服务节点下线机制
服务提供者一端打印
15:54:30.005 [hutool-cron-0] INFO com.org.konnarpc.registry.EtcdRegistry -- 节点 /rpc/com.org.example.common.service.UserService:1.0/localhost:8082 续签成功
log 调用了destroy方法，当前节点下线

测试消费端缓存机制
1.先启动服务提供者
2.修改服务消费者项目，连续调用服务3次，通过debug可以发现，第一次查注册中心、第二次查询缓存
3.在第三次要调用服务时，下线服务提供者，可以在注册中心看到节点的注册key已经被删除了。
4.继续向下执行，发现第三次调用服务时，又重新从注册中心查询，说明缓存已经被更新。
第三次，在10s内下线提供者服务

第一次结果
17:08:22.455 [main] INFO com.org.konnarpc.registry.EtcdRegistry -- 从etcd中获取服务列表
消费者一端konna
第二次结果
17:08:43.395 [main] INFO com.org.konnarpc.registry.EtcdRegistry -- 从缓存中获取服务列表
消费者一端konna
第三次结果
17:09:01.177 [main] INFO com.org.konnarpc.registry.EtcdRegistry -- 从etcd中获取服务列表
Exception in thread "main" java.lang.RuntimeException: 尚未发现服务
	at com.org.konnarpc.proxy.ServiceProxy.invoke(ServiceProxy.java:63)
	at jdk.proxy1/jdk.proxy1.$Proxy0.getUser(Unknown Source)
	at com.org.example.consumer.EasyConsumerExample.main(EasyConsumerExample.java:43)
第四次结果
在第二次和第三次之间重启提供服务器，实现服务之间上下线

测试半包和粘包问题
由服务端启动8888端口，去监听从客户端传过来的字节数组与约定好的固长对比
小于固长，为半包
大于固长，为粘包
服务提供者一端
Hello, server!Hello, server!Hello, server!Hello, server!
good
粘包, length = 80
粘包, length = 144
粘包, length = 208
半包, length = 16
粘包, length = 168
粘包, length = 224
粘包, length = 112
Hello, server!Hello, server!Hello, server!Hello, server!
good

服务调用者一端
去连接8888端口，连接成功之后，发送1000次
socket.write("Hello, server!Hello, server!Hello, server!Hello, server!");
看服务端可以接收多少
Connected to TCP server

测试自定义的编码器和解码器功能是否可用
ProtocolMessage(header=ProtocolMessage.Header(magic=1, version=1, serializer=0, type=0, status=20, requestId=1956624323984244736, bodyLength=349), body=RpcRequest(serviceName=myService, methodName=myMethod, serviceVersion=1.0, parameterTypes=[class java.lang.String], args=[aaa, bbb]))

使用spi机制，测试基于tcp/http传输
16:49:09.800 [main] INFO com.org.konnarpc.spi.SpiLoader -- 加载类型为 com.org.konnarpc.server.VertxServer 的 SPI
TCP server started on port 8082
请求解码
用户名为：konna
响应编码
--------------
请求解码
用户名为：konna
响应编码
--------------
请求解码
用户名为：konna
响应编码
--------------
请求解码
用户名为：konna
响应编码
--------------

17:01:24.435 [main] INFO com.org.konnarpc.registry.EtcdRegistry -- 从etcd中获取服务列表
17:01:24.437 [main] INFO com.org.konnarpc.spi.SpiLoader -- 加载类型为 com.org.konnarpc.server.client.VertxClient 的 SPI
17:01:24.441 [main] INFO com.org.konnarpc.server.tcp.VertxTcpClient -- tcp client send request to server
Connected to TCP server
请求编码
17:01:24.651 [vert.x-eventloop-thread-0] INFO com.org.konnarpc.spi.SpiLoader -- 加载类型为 com.org.konnarpc.serializer.Serializer 的 SPI
响应解码
消费者一端konna
17:01:30.023 [vert.x-eventloop-thread-0] DEBUG io.grpc.netty.NettyClientHandler -- [id: 0xdb455393, L:/127.0.0.1:57624 - R:localhost/127.0.0.1:2379] INBOUND DATA: streamId=5 padding=0 endStream=false length=282 bytes=00000001150a1b08b298eaf1948386fccd0110cdd2918bd2b881cf8e0118a60420065af50112f2010a422f7270632f636f6d2e6f72672e6578616d706c652e63...
17:01:35.589 [main] INFO com.org.konnarpc.registry.EtcdRegistry -- 从缓存中获取服务列表
17:01:35.589 [main] INFO com.org.konnarpc.server.tcp.VertxTcpClient -- tcp client send request to server
Connected to TCP server
请求编码
响应解码
消费者一端konna
17:01:40.023 [vert.x-eventloop-thread-0] DEBUG io.grpc.netty.NettyClientHandler -- [id: 0xdb455393, L:/127.0.0.1:57624 - R:localhost/127.0.0.1:2379] INBOUND DATA: streamId=5 padding=0 endStream=false length=282 bytes=00000001150a1b08b298eaf1948386fccd0110cdd2918bd2b881cf8e0118a70420065af50112f2010a422f7270632f636f6d2e6f72672e6578616d706c652e63...
17:01:45.656 [main] INFO com.org.konnarpc.registry.EtcdRegistry -- 从缓存中获取服务列表
17:01:45.656 [main] INFO com.org.konnarpc.server.tcp.VertxTcpClient -- tcp client send request to server
Connected to TCP server
请求编码
响应解码
消费者一端konna
17:01:50.024 [vert.x-eventloop-thread-0] DEBUG io.grpc.netty.NettyClientHandler -- [id: 0xdb455393, L:/127.0.0.1:57624 - R:localhost/127.0.0.1:2379] INBOUND DATA: streamId=5 padding=0 endStream=false length=282 bytes=00000001150a1b08b298eaf1948386fccd0110cdd2918bd2b881cf8e0118a80420065af50112f2010a422f7270632f636f6d2e6f72672e6578616d706c652e63...
17:01:55.717 [main] INFO com.org.konnarpc.registry.EtcdRegistry -- 从缓存中获取服务列表
17:01:55.717 [main] INFO com.org.konnarpc.server.tcp.VertxTcpClient -- tcp client send request to server
Connected to TCP server
请求编码
响应解码
消费者一端konna